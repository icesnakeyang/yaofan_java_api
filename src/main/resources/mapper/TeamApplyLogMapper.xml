<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gogoyang.yaofan.meta.team.dao.TeamApplyLogDao">

    <resultMap id="teamApplyLogMap" type="com.gogoyang.yaofan.meta.team.entity.TeamApplyLog">
        <result property="teamApplyLogId" column="team_apply_log_id"/>
        <result property="teamId" column="team_id"/>
        <result property="teamName" column="team_name"/>
        <result property="applyUserId" column="apply_user_id"/>
        <result property="applyUserName" column="apply_user_name"/>
        <result property="teamManagerId" column="manager_id"/>
        <result property="teamManagerName" column="team_manager_name"/>
        <result property="createTime" column="create_time"/>
        <result property="teamName" column="team_name"/>
        <result property="applyRemark" column="apply_remark"/>
        <result property="processRemark" column="process_remark"/>
        <result property="processTime" column="process_time"/>
        <result property="processUserId" column="process_user_id"/>
        <result property="processUserName" column="process_user_name"/>
        <result property="processReadTime" column="process_read_time"/>
        <result property="readTime" column="read_time"/>
    </resultMap>

    <!--创建一个团队申请日志-->
    <insert id="createTeamApplyLog" parameterType="com.gogoyang.yaofan.meta.team.entity.TeamApplyLog">
        insert into team_apply_log
        (team_apply_log_id, team_id, apply_user_id, apply_remark, create_time, status)
        values
        (#{teamApplyLogId}, #{teamId},#{applyUserId}, #{applyRemark}, #{createTime}, #{status})
    </insert>

    <!--读取团队申请日志列表-->
    <select id="listTeamApplyLog" parameterType="map"
            resultMap="teamApplyLogMap">
        select team_apply_log.ids,
        team_apply_log_id,
        team_apply_log.team_id,
        team.manager_id,
        team_manager.name as team_manager_name,
        apply_user_id,
        apply_user.name as apply_user_name,
        process_user_id,
        process_user.name as process_user_name,
        team_apply_log.create_time,
        team.name as team_name,
        team_apply_log.status,
        apply_remark,
        process_remark,
        process_time,
        process_read_time,
        read_time
        from ((((team_apply_log
        left join team on team.team_id = team_apply_log.team_id)
        left join user_info apply_user on apply_user_id = user_id)
        left join user_info process_user on process_user_id = process_user.user_id)
        left join user_info team_manager on manager_id=team_manager.user_id)
        where 1 = 1
        <choose>
            <when test="applyUserId!=null">
                and apply_user_id=#{applyUserId}
            </when>
        </choose>
        <choose>
            <when test="processUserId!=null">
                and process_user_id=#{processUserId}
            </when>
        </choose>
        <choose>
            <when test="status!=null">
                and team_apply_log.status=#{status}
            </when>
        </choose>
        <choose>
            <when test="teamList!=null">
                and team_apply_log.team_id in
                <foreach item="item" collection="teamList" separator="," open="(" close=")" index="">
                    #{item}
                </foreach>
            </when>
        </choose>
        order by team_apply_log.ids desc
        limit #{offset},#{size}
    </select>

    <!--根据teamApplyLogId查询团队申请日志详情-->
    <select id="getTeamApplyLog" parameterType="java.lang.String"
            resultMap="teamApplyLogMap">
       select
       team_apply_log.ids,
        team_apply_log_id,
        team.team_id,
       team.name as team_name,
       apply_user_id,
       apply_user.name   as apply_user_name,
       manager_id,
       team_user.name as team_manager_name,
       team_apply_log.create_time,
       team.name         as apply_team_name,
       apply_remark,
       team_apply_log.status,
       process_remark,
       process_time,
       process_user_id,
       process_user.name as process_user_name,
       process_read_time,
       read_time
from ((((team_apply_log
    inner join team on team_apply_log.team_id = team.team_id)
    inner join user_info apply_user on apply_user_id = user_id)
  left join user_info team_user on manager_id=team_user.user_id)
         left outer join user_info process_user on process_user.user_id=process_user_id)
where 1 = 1
and team_apply_log_id=#{teamApplyLogId}
    </select>

    <!--统计团队或者某个用户未处理的申请数-->
    <select id="totalApplyTeamUnProcess" parameterType="map" resultType="int">
        select count(*) as totalUnProcess
        from team_apply_log
        where 1=1
        <if test="userId!=null">
            and apply_user_id = #{userId}
        </if>
        <if test="teamId!=null">
            and team_id=#{teamId}
        </if>
        and status='PENDING'
    </select>

    <!--设置团队申请日志的阅读时间-->
    <update id="setTeamApplyLogReadTime" parameterType="map">
        update team_apply_log set
        read_time=#{readTime}
        where team_apply_log_id=#{teamApplyLogId}
    </update>

    <!--设置团队申请日志的处理结果阅读时间-->
    <update id="setTeamApplyLogReadTimeProcess" parameterType="map">
        update team_apply_log set
        process_read_time=#{readTime}
        where team_apply_log_id=#{teamApplyLogId}
    </update>

    <!--处理团队申请结果-->
    <update id="processTeamApplyLog" parameterType="map">
        update team_apply_log
        <set>
            <if test="status!=null">
                status=#{status},
            </if>
            <if test="processRemark!=null">
                process_remark=#{processRemark},
            </if>
            <if test="processTime!=null">
                process_time=#{processTime},
            </if>
            <if test="processUserId!=null">
                process_user_id=#{processUserId}
            </if>
        </set>
        where team_apply_log_id=#{teamApplyLogId}
    </update>

    <!--取消加入团队的申请-->
    <update id="cancelTeamApplyLog" parameterType="map">
        update team_apply_log set
        status=#{status}
        where team_apply_log_id=#{teamApplyLogId}
    </update>

    <!--统计用户未读的团队申请日志-->
    <select id="totalTeamApplyLogUnRead" parameterType="map" resultType="java.lang.Integer">
        select count(*) as total from team_apply_log
        where read_time is null
        <![CDATA[
        and apply_user_id<>#{userId}
        ]]>
        and team_id in
        <foreach item="item" collection="teamList" separator="," open="(" close=")" index="">
            #{item}
        </foreach>
    </select>

    <!--统计用户未阅读的团队申请日志处理结果的数量-->
    <select id="totalTeamApplyLogUnReadProcess" parameterType="map" resultType="java.lang.Integer">
        select count(*) as total from team_apply_log
        where process_read_time is null
        and process_time is not null
        and apply_user_id = #{userId}
    </select>

    <!--设置我未阅读的处理结果的阅读时间-->
    <update id="setTeamApplyLogReadTimeUnProcess" parameterType="map">
        update team_apply_log set
        process_read_time=#{processReadTime}
        where team_apply_log_id=#{teamApplyLogId}
    </update>
</mapper>