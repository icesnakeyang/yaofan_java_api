<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gogoyang.yaofan.meta.task.dao.TaskDao">

    <resultMap id="taskMap" type="com.gogoyang.yaofan.meta.task.entity.Task">
        <result property="taskId" column="task_id"/>
        <result property="createUserId" column="create_user_id"/>
        <result property="createUserName" column="create_user_name"/>
        <result property="createTime" column="create_time"/>
        <result property="endTime" column="end_time"/>
        <result property="partyBId" column="party_b_id"/>
        <result property="partyBName" column="party_b_name"/>
        <result property="contractTime" column="contract_time"/>
        <result property="status" column="task_status"/>
        <result property="teamId" column="team_id"/>
        <result property="teamName" column="team_name"/>
        <result property="prevTaskId" column="prev_task_id"/>
    </resultMap>

    <!--创建一个任务-->
    <insert id="createTask"
            useGeneratedKeys="true"
            keyProperty="ids"
            parameterType="com.gogoyang.yaofan.meta.task.entity.Task">
      insert into task
      (task_id, create_user_id, point, title, detail,
      create_time, end_time, status, team_id, prev_task_id)
      values
      (#{taskId}, #{createUserId}, #{point}, #{title}, #{detail},
       #{createTime}, #{endTime},#{status}, #{teamId}, #{prevTaskId})
    </insert>

    <!--读取所有我可以抢单的任务，包括所有我加入的团队的任务-->
    <select id="listBiddingTasks" parameterType="map" resultMap="taskMap">
        select task.ids,
        task_id,
        create_user_id,
        create_user.name as party_a_name,
        point,
        title,
        task.create_time,
        end_time,
        party_b_id,
        party_b.name as party_b_name,
        contract_time,
        task.status as task_status,
        team_id
        from (task
        left join user_info create_user on create_user_id = user_id)
        left join user_info party_b on party_b_id = party_b.user_id
        where 1=1
        <if test="userId!=null">
            <![CDATA[
                and create_user_id<>#{userId}
            ]]>
        </if>
        and task.status='BIDDING'
        <if test="teamList!=null">
            and team_id in
            <foreach collection="teamList" item="team"
                     index="index" open="(" close=")" separator=",">
                #{team}
            </foreach>
        </if>
    </select>

    <!--通过taskId读取一个任务详情-->
    <select id="getTaskByTaskId" parameterType="java.lang.String" resultMap="taskMap">
        select task.ids,
       task_id,
       task.create_user_id,
       create_user.name as create_user_name,
       point,
       title,
       detail,
       task.create_time,
       end_time,
       party_b_id,
       party_b.name     as party_b_name,
       contract_time,
       task.status as task_status,
       task.team_id,
       team.name as team_name
        from ((task
        left join user_info create_user on create_user.user_id = task.create_user_id)
       left join user_info party_b on party_b.user_id = task.party_b_id)
left join team on task.team_id=team.team_id
        where task_id=#{taskId}
    </select>

    <!--统计重复的任务数量-->
    <select id="totalTaskDuplicate" parameterType="map" resultType="java.lang.Integer">
        select count(*) as total
        from task
        where 1 = 1
        and title =#{title}
        and detail = #{detail}
        and create_user_id = #{createUserId}
        and status = #{status}
        and point=#{point}
    </select>

    <!--修改任务为抢单成功-->
    <update id="updateTaskDeal" parameterType="map">
        update task set
        party_b_id=#{partyBId},
        contract_time=#{contractTime},
        status=#{status}
        where task_id=#{taskId}
    </update>

    <!--读取我的任务（同时包括我是甲方或乙方）不包括详情-->
    <select id="listMyTasks" parameterType="map"
            resultMap="taskMap">
        select task.ids,
        task_id,
        task.create_user_id,
        create_user.name as party_a_name,
        point,
        title,
        task.create_time,
        end_time,
        party_b_id,
        party_b.name     as party_b_name,
        contract_time,
        task.status      as task_status,
        task.team_id,
        team.name as team_name
        from task
        left join user_info create_user on create_user_id = user_id
        left join user_info party_b on party_b_id = party_b.user_id
        left join team on task.team_id = team.team_id
        where 1 = 1
        and (task.create_user_id = #{userId}
        or party_b_id = #{userId})
        <choose>
            <when test="status!=null">
                and task.status=#{status}
            </when>
        </choose>
        order by end_time
    </select>

    <!--直接根据taskId修改任务状态-->
    <update id="updateTaskStatus" parameterType="com.gogoyang.yaofan.meta.task.entity.Task">
        update task set
        status=#{status}
        where task_id=#{taskId}
    </update>

    <!--统计用户的任务总数（同时包括甲方任务和乙方任务）-->
    <select id="totalUserTask" parameterType="map" resultType="java.lang.Integer">
        select count(*) as total_task
        from task
        where 1 = 1
        and (
        create_user_id = #{userId}
        or party_b_id = #{userId}
        )
        <choose>
            <when test="status!=null">
                and status=#{status}
            </when>
        </choose>
    </select>

    <!--统计一个用户指定时间段内的积分收入和积分支出-->
    <select id="totalPointIn" parameterType="map" resultType="map">
        select sum(point_in) as total_in, sum(point_out) as total_out
        from point_ledger
        where 1 = 1
        and user_id = #{userId}
        <![CDATA[
        and create_time >= cast(#{dateStart} as datetime)
        and create_time < cast(#{dateEnd} as datetime)







        ]]>
    </select>

    <!--读取我的任务（同时包括我是甲方或乙方）包括详情-->
    <select id="listMyTasksDetail" parameterType="map" resultMap="taskMap">
        select task.ids,
       task_id,
       create_user_id,
       create_user.name as party_a_name,
       point,
       title,
       task.create_time,
       end_time,
       party_b_id,
       party_b.name     as party_b_name,
       contract_time,
       task.status      as task_status,
       team_id,
       detail
        from (task
        left join user_info create_user on create_user_id = user_id)
         left join user_info party_b on party_b_id = party_b.user_id
        where create_user_id=#{userId}
        or party_b_id=#{userId}
    order by end_time
    limit #{offset}, #{size}
    </select>

    <!--读取我的任务（我是甲方或者我是乙方）包括详情-->
    <select id="listMyTasksDetailPartyAOrB" parameterType="map" resultMap="taskMap">
        select task.ids,
        task_id,
        task.create_user_id,
        create_user.name as party_a_name,
        point,
        title,
        task.create_time,
        end_time,
        party_b_id,
        party_b.name as party_b_name,
        contract_time,
        task.status as task_status,
        task.team_id,
        team.name as team_name,
        detail
        from task
        left join user_info create_user on create_user_id = user_id
        left join user_info party_b on party_b_id = party_b.user_id
        left join team on task.team_id=team.team_id
        where 1 = 1
        <choose>
            <when test="history!=null">
                <![CDATA[
                and team.status<>'ACTIVE'
                ]]>
            </when>
            <otherwise>
                and team.status='ACTIVE'
            </otherwise>
        </choose>
        <choose>
            <when test="partyAId!=null">
                and task.create_user_id = #{partyAId}
            </when>
        </choose>
        <choose>
            <when test="partyBId!=null">
                and party_b_id = #{partyBId}
            </when>
        </choose>
        order by end_time
        limit #{offset},#{size}
    </select>

    <!--统计我的任务总是（我是甲方或者我是乙方）-->
    <select id="totalMyTasksPartyAOrB" parameterType="map" resultType="java.lang.Integer">
        select count(*) as total
        from task
        left join team on task.team_id=team.team_id
        where 1=1
        <choose>
            <when test="history!=null">
                <![CDATA[
                and team.status<>'ACTIVE'
                ]]>
            </when>
            <otherwise>
                and team.status='ACTIVE'
            </otherwise>
        </choose>
        <choose>
            <when test="partyAId!=null">
                and task.create_user_id=#{partyAId}
            </when>
        </choose>
        <choose>
            <when test="partyBId!=null">
                and party_b_id=#{partyBId}
            </when>
        </choose>
        <choose>
            <when test="status!=null">
                and task.status=#{status}
            </when>
        </choose>
    </select>

    <!--增量修改任务-->
    <update id="updateTask" parameterType="com.gogoyang.yaofan.meta.task.entity.Task">
        update task
        <set>
            <if test="point!=null">
                point=#{point},
            </if>
            <if test="title!=null">
                title=#{title},
            </if>
            <if test="detail!=null">
                detail=#{detail},
            </if>
            <if test="endTime!=null">
                end_time=#{endTime},
            </if>
            <if test="teamId!=null">
                team_id=#{teamId}
            </if>
        </set>
        where task_id=#{taskId}
    </update>

    <!--查询一组团队集合里的等待匹配任务-->
    <select id="listTaskGrabbingTeam" parameterType="map"
            resultMap="taskMap">
        select task.ids,
        task_id,
        task.create_user_id,
        usera.name as create_user_name,
        point,
        title,
        detail,
        task.create_time,
        end_time,
        party_b_id,
        userb.name as party_b_name,
        contract_time,
        task.status,
        task.team_id,
        team.name as team_name
        from ((task
        left join user_info usera on create_user_id=user_id)
        left join user_info userb on party_b_id=userb.user_id)
        left join team on task.team_id=team.team_id
        where 1=1
        and task.status='GRABBING'
        and task.team_id in
        <foreach collection="teamList" open="(" separator="," close=")" item="item">
            #{item}
        </foreach>
    </select>

    <!--删除一个任务-->
    <delete id="deleteTask" parameterType="java.lang.String">
        delete from task
        where task_id=#{taskId}
    </delete>

    <!--读取多个任务列表-->
    <select id="listTask" parameterType="map" resultMap="taskMap">
        select task.ids,
        task_id,
        task.create_user_id,
        create_user.name as party_a_name,
        point,
        title,
        task.create_time,
        end_time,
        party_b_id,
        party_b.name as party_b_name,
        contract_time,
        task.status as task_status,
        task.team_id,
        team.name as team_name
        from task
        left join user_info create_user on create_user_id = user_id
        left join user_info party_b on party_b_id = party_b.user_id
        left join team on task.team_id=team.team_id
        where 1 = 1
        <if test="teamList!=null">
            and task.team_id in
            <foreach collection="teamList" item="item"
                     index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        order by ids desc
        limit #{offset}, #{size}
    </select>

    <select id="totalTask" parameterType="map" resultType="java.lang.Integer">
        select count(*) as total
        from task
        left join user_info create_user on create_user_id = user_id
        left join user_info party_b on party_b_id = party_b.user_id
        left join team on task.team_id=team.team_id
        where 1 = 1
        <if test="teamList!=null">
            and task.team_id in
            <foreach collection="teamList" item="item"
                     index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
    </select>
</mapper>